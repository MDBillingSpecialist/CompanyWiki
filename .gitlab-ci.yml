stages:
  - build
  - test
  - deploy

variables:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REPOSITORY: company-wiki
  ECS_CLUSTER: company-wiki-cluster
  ECS_SERVICE: company-wiki-service
  # GitLab registry variables
  DOCKER_TLS_CERTDIR: ""

# Cache node_modules between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Jobs to lint and test the code
lint:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm run lint
  except:
    - tags

unit_tests:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm test
  artifacts:
    paths:
      - coverage/
    reports:
      junit: junit.xml
  except:
    - tags

e2e_tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.40.0-focal
  script:
    - npm ci
    - npm run build
    - npm run start & npx wait-on http://localhost:3000
    - npx playwright test
  artifacts:
    when: always
    paths:
      - playwright-report/
      - test-results/
  only:
    - main
    - develop

# Build the application
build:
  stage: build
  image: node:18-alpine
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - .next/
      - public/
      - content/
  except:
    - tags

# Build and push Docker image
build_docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - docker --version
    - apk add --no-cache bash git
    - chmod +x ./push-to-gitlab.sh
  script:
    # Login to GitLab registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    
    # Build the Docker image with port configuration
    - docker build --build-arg PORT=3000 -t company-wiki-company-wiki:latest .
    
    # Use the automated script to push to GitLab registry
    - CI_JOB_TOKEN=$CI_JOB_TOKEN ./push-to-gitlab.sh
    
    - echo "Docker image built and pushed to GitLab registry"
  only:
    - main
    - develop

# Deploy to AWS ECS - Production
deploy_production:
  stage: deploy
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    CONTAINER_PORT: 3000
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    # Configure AWS credentials
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    
    # Login to ECR and pull from GitLab
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    
    # Pull from GitLab and tag for ECR
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:latest
    
    # Push the Docker image to ECR
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:$CI_COMMIT_SHA
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:latest
    
    # Update the ECS service to use the new image
    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
    
    # Wait for deployment to complete
    - aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
    - echo "Deployment completed successfully!"
  only:
    - main
  environment:
    name: production
    url: https://wiki.company.com

# Deploy to AWS ECS - Staging
deploy_staging:
  stage: deploy
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    ECR_REPOSITORY: company-wiki-staging
    ECS_CLUSTER: company-wiki-cluster-staging
    ECS_SERVICE: company-wiki-service-staging
    CONTAINER_PORT: 3000
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    # Configure AWS credentials
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    
    # Login to ECR and pull from GitLab
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    
    # Pull from GitLab and tag for ECR
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:latest
    
    # Push the Docker image to ECR
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:$CI_COMMIT_SHA
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:latest
    
    # Update the ECS service to use the new image
    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
    
    # Wait for deployment to complete
    - aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
    - echo "Deployment completed successfully!"
  only:
    - develop
  environment:
    name: staging
    url: https://staging-wiki.company.com
