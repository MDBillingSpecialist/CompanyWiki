stages:
  - build
  - test
  - deploy
  - verify
  - monitor

variables:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REPOSITORY: company-wiki
  APP_RUNNER_SERVICE_PROD: company-wiki
  APP_RUNNER_SERVICE_STAGING: company-wiki-staging
  DOCKER_TLS_CERTDIR: ""
  CPU_STAGING: "1 vCPU"
  MEMORY_STAGING: "2 GB"
  CPU_PROD: "2 vCPU" 
  MEMORY_PROD: "4 GB"

# Cache node_modules between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Test stage jobs
lint:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm run lint
  except:
    - tags

unit_tests:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm run test:ci
  artifacts:
    paths:
      - coverage/
    reports:
      junit: test-results/junit.xml
  except:
    - tags

e2e_tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.51.0-jammy
  script:
    - npm ci
    - npx playwright install --with-deps
    - npm run build
    - npm run start & npx wait-on http://localhost:3000
    - npm run test:e2e
  artifacts:
    when: always
    paths:
      - playwright-report/
      - test-results/
  only:
    - main
    - develop

# Build stage jobs
build:
  stage: build
  image: node:18-alpine
  script:
    - npm ci
    - npm run build
    - mkdir -p content
    - mkdir -p public
    - echo "Build complete, verifying output..."
    - ls -la .next/
  artifacts:
    paths:
      - .next/
      - public/
      - content/
      - server.js
      - apprunner.yaml
      - package.json
      - package-lock.json
      - next.config.js
      - verify-deployment.sh
      - rollback-deployment.sh
      - deploy-aws.sh
  except:
    - tags

docker_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Deploy stage jobs
deploy_staging:
  stage: deploy
  image: amazon/aws-cli:latest
  variables:
    CI: "true"
  needs:
    - build
    - docker_build
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - yum install -y jq git
    - chmod +x ./deploy-aws.sh
    - APP_NAME=$APP_RUNNER_SERVICE_STAGING AWS_REGION=$AWS_DEFAULT_REGION CPU=$CPU_STAGING MEMORY=$MEMORY_STAGING BRANCH=$CI_COMMIT_REF_NAME ./deploy-aws.sh
    - SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_STAGING'].ServiceArn" --output text)
    - SERVICE_URL=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.ServiceUrl" --output text)
    - echo "SERVICE_URL=$SERVICE_URL" > deploy.env
    - cat deploy.env
  artifacts:
    paths:
      - deploy.env
    reports:
      dotenv: deploy.env
  environment:
    name: staging
    url: https://$SERVICE_URL
    on_stop: stop_staging
  only:
    - develop

verify_staging:
  stage: verify
  image: amazon/aws-cli:latest
  needs:
    - deploy_staging
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - yum install -y curl jq
    - chmod +x ./verify-deployment.sh
    - ./verify-deployment.sh
  only:
    - develop

deploy_production:
  stage: deploy
  image: amazon/aws-cli:latest
  variables:
    CI: "true"
  needs:
    - build
    - docker_build
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - yum install -y jq git
    - chmod +x ./deploy-aws.sh
    - APP_NAME=$APP_RUNNER_SERVICE_PROD AWS_REGION=$AWS_DEFAULT_REGION CPU=$CPU_PROD MEMORY=$MEMORY_PROD BRANCH=$CI_COMMIT_REF_NAME ./deploy-aws.sh
    - SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_PROD'].ServiceArn" --output text)
    - SERVICE_URL=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.ServiceUrl" --output text)
    - echo "SERVICE_URL=$SERVICE_URL" > deploy.env
    - cat deploy.env
    - git config --global user.email "gitlab-ci@example.com"
    - git config --global user.name "GitLab CI"
    - TIMESTAMP=$(date +%Y%m%d%H%M%S)
    - git tag "deploy-prod-$TIMESTAMP"
    - git push https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git "deploy-prod-$TIMESTAMP"
  artifacts:
    paths:
      - deploy.env
    reports:
      dotenv: deploy.env
  environment:
    name: production
    url: https://$SERVICE_URL
    on_stop: rollback_production
  only:
    - main
  when: manual

verify_production:
  stage: verify
  image: amazon/aws-cli:latest
  needs:
    - deploy_production
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - yum install -y curl jq
    - chmod +x ./verify-deployment.sh
    - ./verify-deployment.sh
  only:
    - main

# Monitor stage jobs
setup_monitoring:
  stage: monitor
  image: amazon/aws-cli:latest
  needs:
    - verify_production
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - yum install -y jq
    - 'cat aws/cloudwatch-alarms.yml | sed "s/NotificationEmail: admin@example.com/NotificationEmail: monitoring@example.com/g" > alarms.yml'
    - aws cloudformation deploy --template-file alarms.yml --stack-name company-wiki-alarms --capabilities CAPABILITY_IAM
    - 'cat aws/cloudwatch-dashboard.json | sed "s/\${ServiceName}/company-wiki/g" > dashboard.json'
    - aws cloudwatch put-dashboard --dashboard-name company-wiki-dashboard --dashboard-body file://dashboard.json
  only:
    - main
  when: manual

# Environment management jobs
stop_staging:
  stage: deploy
  image: amazon/aws-cli:latest
  variables:
    GIT_STRATEGY: none
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_STAGING'].ServiceArn" --output text)
    - if [ -n "$SERVICE_ARN" ]; then aws apprunner pause-service --service-arn $SERVICE_ARN; fi
  environment:
    name: staging
    action: stop
  when: manual
  only:
    - develop

rollback_production:
  stage: deploy
  image: amazon/aws-cli:latest
  needs:
    - build
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - yum install -y jq
    - chmod +x ./rollback-deployment.sh
    - APP_NAME=$APP_RUNNER_SERVICE_PROD AWS_REGION=$AWS_DEFAULT_REGION ./rollback-deployment.sh
  environment:
    name: production
    action: stop
  when: manual
  only:
    - main